package controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.PagingVO;
import handler.PagingHandler;
import service.BoardService;
import service.BoardServiceImpl;

@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	//로그 객체 선언
	private static final Logger log = 
			LoggerFactory.getLogger(BoardController.class);
	//jsp에서 받은 요청을 처리, 결과를 다른 jsp로 보내는 역할
	private RequestDispatcher rdp;
	//목적지 주소 저장변수
	private String destPage;
	//DB의 구문 체크 값 저장
	private int isOk;
	//파일 경로를 저장할 변수
	private String savePath;
	//service interface
	private BoardService bsv;
	//controller -> service -> dao => dao -> service -> controller
       
    public BoardController() {
    	//bsv의 객체 연결, bsv를 구현할 객체 생성
    	bsv = new BoardServiceImpl();
    }

	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//모든 처리가 이루어지는 부분
		//각 객체의 인코딩 설정
		//encoding 설정, contentType 설정, 요청경로 파악
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=UTF-8"); //jsp에서 받아야 할 컨텐츠 타입
		
		//jsp에서 오는 요청 주소
		String uri = request.getRequestURI();
		log.info("uri >>>>> "+uri);
		String path = uri.substring(uri.lastIndexOf("/")+1);
		log.info("path >>>>> "+path);
		
		switch(path) {
		case "register" : 
			//화면띄우는용
			//글쓰기 페이지로 이동해서 페이지가 나오도록 설정
			destPage = "/board/register.jsp";
			break;
			
//		case "insert" :
//			try {
//				//jsp에서 데이터를 입력 후  전송
//				String title = request.getParameter("title");
//				String writer = request.getParameter("writer");
//				String content = request.getParameter("content");
//				BoardVO bvo = new BoardVO(title, writer, content);
//				
//				//데이터를 db에 등록한 후 index.jsp로 이동
//				isOk = bsv.insert(bvo);
//				log.info("insert >>>>> "+((isOk>0)? "성공":"실패"));
//				
//				//가장 큰 bno를 구해서 등록한 글의 detail로 이동하도록 만들기
//				int bno = bsv.maxBno();
//				destPage = "detail?bno="+bno;
//				
//			} catch (Exception e) {
//				log.info("insert >>>>> error");
//				e.printStackTrace();
//			}
//			break;
		case "insert" :
			try {
				//파일을 업로드할 물리적인 경로 설정 (업로드 할때 설정)
				savePath = getServletContext().getRealPath("/_fileUpload");
				
			} catch (Exception e) {
				log.info("insert >>>>> error");
				e.printStackTrace();
			}
			break;
		//--------------------------------------------------------
//		case "list" : 
//			try {
//				List<BoardVO> list = bsv.selectList();
//				//list를 화면으로 보내기 request 객체에 실어보내기
//				request.setAttribute("list", list);
//				destPage = "/board/list.jsp";
//				
//			} catch (Exception e) {
//				log.info("list >>>>> error");
//				e.printStackTrace();
//			}
//			break;
			
		case "pageList" :
			try {
				PagingVO pgvo = new PagingVO(); //아무것도 안 넣으면 1,10이 기본
				
				if(request.getParameter("pageNo") != null) {
					int pageNo = Integer.parseInt(request.getParameter("pageNo"));
					int qty = Integer.parseInt(request.getParameter("qty"));
					log.info("pageNo : "+pageNo + ", qty : "+qty);
					pgvo = new PagingVO(pageNo, qty);
				}
				
				//2.검색어 받기
				pgvo.setType(request.getParameter("type"));
				pgvo.setKeyword(request.getParameter("keyword"));
				log.info("type >>> "+pgvo.getType()+" / keyword >>> "+pgvo.getKeyword());
				
				//1.페이징
				int totalCount = bsv.getTotalCount(pgvo); //DB에서 전체 카운트 요청, pgvo는 검색어 받을 때 넣어줌.
				log.info("전체 게시글 수 >>> " +totalCount);
				
				//bsv한테 pgvo주고 limit 적용한 리스트 가져오기
				List<BoardVO> list = bsv.getPageList(pgvo);
				request.setAttribute("list", list);
				
				//페이지 정보를 list.jsp로 보내기
				PagingHandler ph = new PagingHandler(totalCount, pgvo);
				request.setAttribute("ph", ph);
				log.info("페이징 성공!");
				destPage = "/board/list.jsp";
				
			} catch (Exception e) {
				log.info("pageList >>>>> error");
				e.printStackTrace();
			}
			break;
		//--------------------------------------------------------	
		case "detail" :
			try {
				//상세페이지를 볼 게시물의 bno 가져오기
				int bno = Integer.parseInt(request.getParameter("bno"));
				
				//readcount => detail값 불러오기 전에 숫자를 올려줘야 함.
				isOk = bsv.readCount(bno);
				
				BoardVO bvo = bsv.selectOne(bno);
				request.setAttribute("bvo", bvo); //bvo의 값을 화면으로 보내기
				destPage = "/board/detail.jsp";
				
				//본인 글만 수정,삭제할 수 있도록 현재 로그인 정보를 주어 일치할 때만
				HttpSession ses = request.getSession();
				
			} catch (Exception e) {
				log.info("detail >>>>> error");
				e.printStackTrace();
			}
			break;
		//--------------------------------------------------------		
		case "modify" :
			try {
				//수정 = detail 정보를 받고 register을 하는 것
				int bno = Integer.parseInt(request.getParameter("bno"));
				BoardVO bvo = bsv.selectOne(bno);
				request.setAttribute("bvo", bvo);
				destPage = "/board/modify.jsp";
				
			} catch (Exception e) {
				log.info("modify >>>>> error");
				e.printStackTrace();
			}
			break;
			
		case "edit" : 
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				String title = request.getParameter("title");
				String content = request.getParameter("content");
				BoardVO bvo = new BoardVO(bno, title, content);
				
				isOk = bsv.update(bvo);
				log.info("update >>>>> "+((isOk>0)? "성공":"실패"));
				destPage = "detail?bno="+bno;
				//brd의 detail임 => 수정된 내용을 보기 위해서, 업데이트된 내용
				
			} catch (Exception e) {
				log.info("edit >>>>> error");
				e.printStackTrace();
			}
			break;
		//--------------------------------------------------------	
		case "remove" :
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				isOk = bsv.delete(bno);
				log.info("delete >>>>> "+((isOk>0)? "성공":"실패"));
				
				destPage = "pageList";
				//삭제 후 리스트를 다시 가져와서 다시 보여주기 위해서
				//수정된 내용이 있거나 내용을 다시 가져와야하는 상황에서는 데이터가 없는 jsp가 아닌 컨트롤러를 가져온다.
				
			} catch (Exception e) {
				log.info("remove >>>>> error");
				e.printStackTrace();
			}
			break;
			
		} 

		
		//목적지 데이터 경로로 전달해주는 객체(requestDispatcher)
		rdp = request.getRequestDispatcher(destPage);
		rdp.forward(request, response); //요청에 필요한 객체를 가지고, 경로로 이동.
	}

	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
