package controller;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.PagingVO;
import handler.FileHandler;
import handler.PagingHandler;
import net.coobird.thumbnailator.Thumbnails;
import service.BoardService;
import service.BoardServiceImpl;

@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	//로그 객체 선언
	private static final Logger log = 
			LoggerFactory.getLogger(BoardController.class);
	//jsp에서 받은 요청을 처리, 결과를 다른 jsp로 보내는 역할
	private RequestDispatcher rdp;
	//목적지 주소 저장변수
	private String destPage;
	//DB의 구문 체크 값 저장
	private int isOk;
	//파일 경로를 저장할 변수
	private String savePath;
	//service interface
	private BoardService bsv;
	//controller -> service -> dao => dao -> service -> controller
       
    public BoardController() {
    	//bsv의 객체 연결, bsv를 구현할 객체 생성
    	bsv = new BoardServiceImpl();
    }

	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//모든 처리가 이루어지는 부분
		//각 객체의 인코딩 설정
		//encoding 설정, contentType 설정, 요청경로 파악
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=UTF-8"); //jsp에서 받아야 할 컨텐츠 타입
		
		//jsp에서 오는 요청 주소
		String uri = request.getRequestURI();
		log.info("uri >>>>> "+uri);
		String path = uri.substring(uri.lastIndexOf("/")+1);
		log.info("path >>>>> "+path);
		
		switch(path) {
		case "register" : 
			//화면띄우는용
			//글쓰기 페이지로 이동해서 페이지가 나오도록 설정
			destPage = "/board/register.jsp";
			break;
			
//		case "insert" :
//			try {
//				//jsp에서 데이터를 입력 후  전송
//				String title = request.getParameter("title");
//				String writer = request.getParameter("writer");
//				String content = request.getParameter("content");
//				BoardVO bvo = new BoardVO(title, writer, content);
//				
//				//데이터를 db에 등록
//				isOk = bsv.insert(bvo);
//				log.info("insert >>>>> "+((isOk>0)? "성공":"실패"));
//				
//				//가장 큰 bno를 구해서 등록한 글의 detail로 이동하도록 만들기
//				int bno = bsv.maxBno();
//				destPage = "detail?bno="+bno;
//				
//			} catch (Exception e) {
//				log.info("insert >>>>> error");
//				e.printStackTrace();
//			}
//			break;
		case "insert" :
			try {
				//파일을 업로드할 물리적인 경로 설정 (업로드 할때 설정)
				savePath = getServletContext().getRealPath("/_fileUpload");
				File fileDir = new File(savePath);
				log.info("파일 저장 위치 : "+fileDir);
				
				//파일 객체를 생성하기 위한 객체(파일에 대한 정보를 설정)
				//DiskFileItemFactory : 업로드 된 파일을 저장할 저장소와 관련된 클래스
				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				fileItemFactory.setRepository(fileDir); //저장할 위치 설정 (file객체로 지정해야 함)
				fileItemFactory.setSizeThreshold(2*1024*1024); //저장을 위한 임시파일에 대한 용량 설정 : byte단위
				//1024 두번하면 메가바이트 = 2메가바이트
				BoardVO bvo = new BoardVO();
				
				//multipart/form-data 형식으로 넘어온 request 객체를 다루기 쉽게 변환해주는 객체형식으로 저장
				/* ServletFileUpload : HTTP요청에 대한 'HttpServletRequest '객체로부터 
				 * 'multipart/form-data'형식으로 넘어온 HTTP Body부분을 다루기 쉽게 변환해주는 역할을 수행. */
				ServletFileUpload fileUpload = new ServletFileUpload(fileItemFactory);
				
				// 'parseRequest()'메서드를 수행하면 ' FileItem '이라는 형식으로 반환
				/* FileItem: 사용자가 업로드한 'File'데이터나 사용자가 'input text'에 입력한 일반 요청 데이터에 대한 객체.
				 * 'FileItem isFormField()'메서드의 리턴값이 'true'이면 'text'같은 일반 입력 데이터이며, 
				 * 'false'이면 파일데이터임을 알 수 있음. 
				 * 즉, 리턴값이 'false'인 경우에만 업로드된 파일인 것으로 인지하여 처리하면 됨. */
				List<FileItem> itemList = fileUpload.parseRequest(request); //commons로 import
				//DB로 넘기기 위한 BoardVO 객체로 변환. 이미지는 저장
				for(FileItem item : itemList) {
					switch(item.getFieldName()) {
					case "title" :
						bvo.setTitle(item.getString("utf-8")); //인코딩 형식을 담아서 변환
						break;
					case "writer" :
						bvo.setWriter(item.getString("utf-8"));
						break;
					case "content" :
						bvo.setContent(item.getString("utf-8"));
						break;
					case "image_file" :
						//이미지 저장 처리가 필요
						//이미지가 필수x, 없는 경우에도 처리
						//이미지가 있는지 체크
						if(item.getSize() > 0) { //데이터 크기가 있다면 이미지가 있는 걸로 처리
							//경로를 포함해서 들어오는 케이스가 있음
							//마지막 슬래시 뒤쪽에 있는 파일 이름만 분리 -> dog.jpg
							String fileName = item.getName()
									.substring(item.getName().lastIndexOf("/")+1);
							//시스템의 현재 시간_파일이름.jpg
							fileName = System.currentTimeMillis()+"_"+fileName;
							
							//파일 객체 생성 : D:~/fileUpload/현재시간_cat.jpg
							File uploadFilePath = new File(fileDir+File.separator+fileName); //fileDir = 원래 경로
							log.info("파일경로+이름 : "+uploadFilePath);
							
							//저장
							try { //어디서 에러났는지 확인용으로 try~catch 한번 더 입힘
								item.write(uploadFilePath); //자바 객체를 디스크에 쓰기, 실제 파일로 변경
								bvo.setImage_File(fileName);
								
								//썸네일 작업 : 트래픽 과다사용 방지
								Thumbnails.of(uploadFilePath)
								.size(60, 60)
								.toFile(new File(fileDir+File.separator+"_th_"+fileName));
								
							} catch (Exception e) {
								log.info(">>>>> file writer on disk error");
								e.printStackTrace();
							}
						}
						break;	
					}//switch
				}//for
				
				//DB에 bvo 저장요청
				isOk = bsv.insert(bvo);
				log.info("insert >>>>> "+((isOk>0)? "성공":"실패"));
				
				//가장 큰 bno를 구해서 등록한 글의 detail로 이동하도록 만들기
				int bno = bsv.maxBno();
				destPage = "detail?bno="+bno;
				
			} catch (Exception e) {
				log.info("insert >>>>> error");
				e.printStackTrace();
			}
			break;
		//--------------------------------------------------------
//		case "list" : 
//			try {
//				List<BoardVO> list = bsv.selectList();
//				//list를 화면으로 보내기 request 객체에 실어보내기
//				request.setAttribute("list", list);
//				destPage = "/board/list.jsp";
//				
//			} catch (Exception e) {
//				log.info("list >>>>> error");
//				e.printStackTrace();
//			}
//			break;
			
		case "pageList" :
			try {
				PagingVO pgvo = new PagingVO(); //아무것도 안 넣으면 1,10이 기본
				
				if(request.getParameter("pageNo") != null) {
					int pageNo = Integer.parseInt(request.getParameter("pageNo"));
					int qty = Integer.parseInt(request.getParameter("qty"));
					log.info("pageNo : "+pageNo + ", qty : "+qty);
					pgvo = new PagingVO(pageNo, qty);
				}
				
				//2.검색어 받기
				pgvo.setType(request.getParameter("type"));
				pgvo.setKeyword(request.getParameter("keyword"));
				log.info("type >>> "+pgvo.getType()+" / keyword >>> "+pgvo.getKeyword());
				
				//1.페이징
				int totalCount = bsv.getTotalCount(pgvo); //DB에서 전체 카운트 요청, pgvo는 검색어 받을 때 넣어줌.
				log.info("전체 게시글 수 >>> " +totalCount);
				
				//bsv한테 pgvo주고 limit 적용한 리스트 가져오기
				List<BoardVO> list = bsv.getPageList(pgvo);
				request.setAttribute("list", list);
				
				//페이지 정보를 list.jsp로 보내기
				PagingHandler ph = new PagingHandler(totalCount, pgvo);
				request.setAttribute("ph", ph);
				log.info("페이징 성공!");
				destPage = "/board/list.jsp";
				
			} catch (Exception e) {
				log.info("pageList >>>>> error");
				e.printStackTrace();
			}
			break;
		//--------------------------------------------------------	
		case "detail" :
			try {
				//상세페이지를 볼 게시물의 bno 가져오기
				int bno = Integer.parseInt(request.getParameter("bno"));
				
				//readcount => detail값 불러오기 전에 숫자를 올려줘야 함.
				isOk = bsv.readCount(bno);
				
				BoardVO bvo = bsv.selectOne(bno);
				request.setAttribute("bvo", bvo); //bvo의 값을 화면으로 보내기
				destPage = "/board/detail.jsp";
				
				//본인 글만 수정,삭제할 수 있도록 현재 로그인 정보를 주어 일치할 때만
				HttpSession ses = request.getSession();
				
			} catch (Exception e) {
				log.info("detail >>>>> error");
				e.printStackTrace();
			}
			break;
		//--------------------------------------------------------		
		case "modify" :
			try {
				//수정 = detail 정보를 받고 register을 하는 것
				int bno = Integer.parseInt(request.getParameter("bno"));
				BoardVO bvo = bsv.selectOne(bno);
				request.setAttribute("bvo", bvo);
				destPage = "/board/modify.jsp";
				
			} catch (Exception e) {
				log.info("modify >>>>> error");
				e.printStackTrace();
			}
			break;
			
		case "edit" : 
			try {
//				int bno = Integer.parseInt(request.getParameter("bno"));
//				String title = request.getParameter("title");
//				String content = request.getParameter("content");
//				BoardVO bvo = new BoardVO(bno, title, content);
//				
//				isOk = bsv.update(bvo);
//				log.info("update >>>>> "+((isOk>0)? "성공":"실패"));
//				destPage = "detail?bno="+bno;
//				//brd의 detail임 => 수정된 내용을 보기 위해서, 업데이트된 내용
				
				//파일 저장 경로 설정
				savePath = getServletContext().getRealPath("/_fileUpload");
				
				
				File fileDir = new File(savePath);
				//디스크에 기록할 파일 정보를 setting하는 객체
				DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
				fileItemFactory.setRepository(fileDir); //저장 경로 설정
				fileItemFactory.setSizeThreshold(2*1024*1024); //임시저장 용량 설정 2M
				
				BoardVO bvo = new BoardVO();
				
				ServletFileUpload fileUpload = new ServletFileUpload(fileItemFactory);
				log.info(">> update 준비 > ");
				
				List<FileItem> itemList = fileUpload.parseRequest(request);

				String old_file = null; //수정하기 전 원래 그림파일, 없을 수 있음
				for(FileItem item : itemList) {
					switch(item.getFieldName()) {
					case "bno" :
						bvo.setBno(Integer.parseInt(item.getString("utf-8")));
						break;
					case "title" :
						bvo.setTitle(item.getString("utf-8")); //인코딩 형식을 담아서 변환
						break;
					case "content" :
						bvo.setContent(item.getString("utf-8"));
						break;
					case "image_file" :
						//수정 이전 파일
						old_file = item.getString("utf-8");
						break;	
					case "new_file" :
						//새로운 파일이 있는지 확인
						if(item.getSize() > 0) {
							//기존 파일 삭제 (기존 파일이 있을 경우)
							if(old_file != null) {
								FileHandler fileHandler = new FileHandler();
								isOk = fileHandler.deleteFile(old_file, savePath);
							}
							//삭제 후 new 파일의 경로와 파일명 생성
							String fileName = item.getName().substring(
									item.getName().lastIndexOf(File.separator)+1);
							
							log.info("new fileName : "+fileName);
							
							//실제 저장될 파일이름
							fileName = System.currentTimeMillis()+"_"+fileName;
							//파일 객체 생성 : D:~/fileUpload/현재시간_cat.jpg
							File uploadFilePath = new File(fileDir+File.separator+fileName);
							
							//저장
							try {
								item.write(uploadFilePath);
								bvo.setImage_File(fileName);
								
								Thumbnails.of(uploadFilePath)
								.size(60, 60)
								.toFile(new File(fileDir+File.separator+"_th_"+fileName));
								
							} catch (Exception e) {
								log.info(">>>>> new file save error");
								e.printStackTrace();
							}
						}else { //새로운 파일이 없다면 기존 파일 다시 담기
							bvo.setImage_File(old_file);
						}
				
					}//switch
				}//for
				
				
			} catch (Exception e) {
				log.info("edit >>>>> error");
				e.printStackTrace();
			}
			break;
		//--------------------------------------------------------	
		case "remove" :
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				isOk = bsv.delete(bno);
				log.info("delete >>>>> "+((isOk>0)? "성공":"실패"));
				
				destPage = "pageList";
				//삭제 후 리스트를 다시 가져와서 다시 보여주기 위해서
				//수정된 내용이 있거나 내용을 다시 가져와야하는 상황에서는 데이터가 없는 jsp가 아닌 컨트롤러를 가져온다.
				
			} catch (Exception e) {
				log.info("remove >>>>> error");
				e.printStackTrace();
			}
			break;
			
		} 

		
		//목적지 데이터 경로로 전달해주는 객체(requestDispatcher)
		rdp = request.getRequestDispatcher(destPage);
		rdp.forward(request, response); //요청에 필요한 객체를 가지고, 경로로 이동.
	}

	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
