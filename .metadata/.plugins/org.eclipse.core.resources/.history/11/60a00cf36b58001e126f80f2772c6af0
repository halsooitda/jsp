package controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.MemberVO;
import service.MemberService;
import service.MemberServiceImpl;

@WebServlet("/mem/*")
public class MemberController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = 
			LoggerFactory.getLogger(BoardController.class);
	private RequestDispatcher rdp;
	private String destPage;
	private int isOk;
	private String savePath;
	private MemberService msv;

	
    public MemberController() {
    	msv = new MemberServiceImpl();
    }

	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=UTF-8");
		
		String uri = request.getRequestURI();
		log.info("uri >>>>> "+uri);
		String path = uri.substring(uri.lastIndexOf("/")+1);
		log.info("path >>>>> "+path);
		
		switch(path) {
		case "join" :
			destPage = "/member/join.jsp";
			break;
		case "register" :
			try {
				String id = request.getParameter("id");
				String pwd = request.getParameter("pwd");
				String nickname = request.getParameter("nickname");
				String email = request.getParameter("email");
				int age = Integer.parseInt(request.getParameter("age"));
				MemberVO mvo = new MemberVO(id, pwd, nickname, email, age);
				
				isOk = msv.join(mvo);
				log.info("join >>>>> "+((isOk>0)? "성공":"실패"));
				destPage = "/index.jsp";
				
			} catch (Exception e) {
				log.info("join >>>>> error");
				e.printStackTrace();
			}
			break;
		//-----------------------------------------------------
		case "login" :
			try {
				//파라미터가 DB의 값에 있는지 확인
				//해당 id, pw가 일치하는 데이터를 가져오기
				//가져온 데이터를 세션에 저장
				//session : 모든 jsp페이지에 공유되는 데이터
				//아이디가 없다면, 메시지를 보내서 alert창 띄우기
				String id = request.getParameter("id");
				String pwd = request.getParameter("pwd");
				MemberVO mvo = new MemberVO(id, pwd);
				
				//일치하는 데이터 가져오기
				MemberVO loginmvo = msv.login(mvo);
				log.info("로그인 정보 >>> "+loginmvo);
				
				//가져온 데이터를 세션에 저장
				//세션 가져오기
				if(loginmvo != null) {
					//연결된 세션이 있다면 기존의 세션 가져오기, 없으면 새로 생성
					HttpSession ses = request.getSession();
					ses.setAttribute("ses", loginmvo);
					ses.setMaxInactiveInterval(10*60);
				}else {
					//로그인 객체가 없다면
					request.setAttribute("msg_login", 0); //잘-1, 안됐-0
				}
				destPage = "/index.jsp";
				
			} catch (Exception e) {
				log.info("login >>>>> error");
				e.printStackTrace();
			}
			break;
		//-----------------------------------------------------
		case "logout" :
			try {
				//로그인한 세션 가져오기
				HttpSession ses = request.getSession();
				//lastlogin 시간기록, id가 필요(누구의 마지막 로그인인지)
				//session에서 id가져오기
				//형변환 필요, session안에 ses라는 객체를 내가 넣어놨고, 그 객체 안의 id를 가져와야하므로.
				//객체이므로 형변환 해줘야 함.
				MemberVO mvo = (MemberVO)ses.getAttribute("ses");
				String id = mvo.getId();
				isOk = msv.lastLogin(id);
				log.info("lastLogin >>>>> "+((isOk>0)? "성공":"실패"));
				
				ses.invalidate(); //권한 끊기
				destPage = "/index.jsp";
				
			} catch (Exception e) {
				log.info("logout >>>>> error");
				e.printStackTrace();
			}
			break;
		//-----------------------------------------------------	
		case "list" :
			try {
				List<MemberVO> list = msv.getList();
				
				request.setAttribute("list", list);
				destPage = "/member/list.jsp";
				
			} catch (Exception e) {
				log.info("list >>>>> error");
				e.printStackTrace();
			}
			break;
		//-----------------------------------------------------		
		case "modify" :
			destPage = "/member/modify.jsp";
			break;
			
		case "update" :
			try {
				String id = request.getParameter("id");
				String pwd = request.getParameter("pwd");
				String nickname = request.getParameter("nickname");
				String email = request.getParameter("email");
				int age = Integer.parseInt(request.getParameter("age"));
				MemberVO mvo = new MemberVO(id, pwd, nickname, email, age);
				
				isOk = msv.update(mvo);
				log.info("update >>>>> "+((isOk>0)? "성공":"실패"));
				
				destPage = "logout";
				
			} catch (Exception e) {
				log.info("update >>>>> error");
				e.printStackTrace();			}
			break;
		//-----------------------------------------------------		
		case "remove" :
			break;
		
		}
		
		//목적지 주소값 세팅
		rdp = request.getRequestDispatcher(destPage);
		//정보 실어보내기
		rdp.forward(request, response);
	}

	
	
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
